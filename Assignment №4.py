class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []

    def __str__(self):
        return f"–ò–º—è: {self.name}\n–§–∞–º–∏–ª–∏—è: {self.surname}"


class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def _average_grade(self):
        all_grades = [grade for grades_list in self.grades.values() for grade in grades_list]
        return sum(all_grades) / len(all_grades) if all_grades else 0.0

    def __str__(self):
        avg = self._average_grade()
        return f"–ò–º—è: {self.name}\n–§–∞–º–∏–ª–∏—è: {self.surname}\n–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –ª–µ–∫—Ü–∏–∏: {avg:.1f}"

    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self._average_grade() < other._average_grade()

    def __le__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self._average_grade() <= other._average_grade()

    def __eq__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self._average_grade() == other._average_grade()


class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course].append(grade)
            else:
                student.grades[course] = [grade]
            return None
        else:
            return '–û—à–∏–±–∫–∞'

    def __str__(self):
        return f"–ò–º—è: {self.name}\n–§–∞–º–∏–ª–∏—è: {self.surname}"


class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.courses_in_progress = []
        self.finished_courses = []
        self.grades = {}

    def rate_lecture(self, lecturer, course, grade):
        if not isinstance(lecturer, Lecturer):
            return '–û—à–∏–±–∫–∞'
        if course not in self.courses_in_progress:
            return '–û—à–∏–±–∫–∞'
        if course not in lecturer.courses_attached:
            return '–û—à–∏–±–∫–∞'
        if not (0 <= grade <= 10):
            return '–û—à–∏–±–∫–∞'

        if course in lecturer.grades:
            lecturer.grades[course].append(grade)
        else:
            lecturer.grades[course] = [grade]
        return None

    def _average_grade(self):
        all_grades = [grade for grades_list in self.grades.values() for grade in grades_list]
        return sum(all_grades) / len(all_grades) if all_grades else 0.0

    def __str__(self):
        avg = self._average_grade()
        courses_in_progress = ', '.join(self.courses_in_progress) if self.courses_in_progress else "–ù–µ—Ç"
        finished_courses = ', '.join(self.finished_courses) if self.finished_courses else "–ù–µ—Ç"
        return (
            f"–ò–º—è: {self.name}\n"
            f"–§–∞–º–∏–ª–∏—è: {self.surname}\n"
            f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {avg:.1f}\n"
            f"–ö—É—Ä—Å—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è: {courses_in_progress}\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã: {finished_courses}"
        )

    def __lt__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self._average_grade() < other._average_grade()

    def __le__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self._average_grade() <= other._average_grade()

    def __eq__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self._average_grade() == other._average_grade()


# üìå –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

def average_grade_students(students, course):
    """–°—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –∑–∞ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞."""
    all_grades = []
    for student in students:
        if course in student.grades:
            all_grades.extend(student.grades[course])
    return sum(all_grades) / len(all_grades) if all_grades else 0.0


def average_grade_lecturers(lecturers, course):
    """–°—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –∑–∞ –ª–µ–∫—Ü–∏–∏ –≤—Å–µ—Ö –ª–µ–∫—Ç–æ—Ä–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞."""
    all_grades = []
    for lecturer in lecturers:
        if course in lecturer.grades:
            all_grades.extend(lecturer.grades[course])
    return sum(all_grades) / len(all_grades) if all_grades else 0.0


# üéØ –°–û–ó–î–ê–ù–ò–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í

# –°—Ç—É–¥–µ–Ω—Ç—ã
student1 = Student('–ê–Ω–Ω–∞', '–ò–≤–∞–Ω–æ–≤–∞', '–∂–µ–Ω—Å–∫–∏–π')
student1.courses_in_progress += ['Python', 'Git']
student1.finished_courses += ['–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ']

student2 = Student('–ò–≤–∞–Ω', '–ü–µ—Ç—Ä–æ–≤', '–º—É–∂—Å–∫–æ–π')
student2.courses_in_progress += ['Python', 'C++']
student2.finished_courses += ['–ê–ª–≥–æ—Ä–∏—Ç–º—ã']

# –õ–µ–∫—Ç–æ—Ä—ã
lecturer1 = Lecturer('–ê–ª–µ–∫—Å–µ–π', '–°–∏–¥–æ—Ä–æ–≤')
lecturer1.courses_attached += ['Python', 'Git']

lecturer2 = Lecturer('–ú–∞—Ä–∏—è', '–ö–æ–∑–ª–æ–≤–∞')
lecturer2.courses_attached += ['Python', 'C++']

# –≠–∫—Å–ø–µ—Ä—Ç—ã
reviewer1 = Reviewer('–û–ª–µ–≥', '–°–º–∏—Ä–Ω–æ–≤')
reviewer1.courses_attached += ['Python', 'Git']

reviewer2 = Reviewer('–ï–ª–µ–Ω–∞', '–í–∞—Å–∏–ª—å–µ–≤–∞')
reviewer2.courses_attached += ['Python', 'C++']


# üß™ –í–´–ó–û–í –í–°–ï–• –ú–ï–¢–û–î–û–í

# –≠–∫—Å–ø–µ—Ä—Ç—ã –≤—ã—Å—Ç–∞–≤–ª—è—é—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
reviewer1.rate_hw(student1, 'Python', 9)
reviewer1.rate_hw(student1, 'Python', 8)
reviewer1.rate_hw(student1, 'Git', 10)

reviewer2.rate_hw(student2, 'Python', 7)
reviewer2.rate_hw(student2, 'C++', 8)
reviewer2.rate_hw(student2, 'Python', 9)

# –°—Ç—É–¥–µ–Ω—Ç—ã –≤—ã—Å—Ç–∞–≤–ª—è—é—Ç –æ—Ü–µ–Ω–∫–∏ –ª–µ–∫—Ç–æ—Ä–∞–º
student1.rate_lecture(lecturer1, 'Python', 10)
student1.rate_lecture(lecturer1, 'Git', 9)
student1.rate_lecture(lecturer2, 'Python', 8)  # –û—à–∏–±–∫–∞ ‚Äî –ª–µ–∫—Ç–æ—Ä2 –Ω–µ –≤–µ–¥—ë—Ç Git —É student1, –Ω–æ Python ‚Äî –¥–∞

student2.rate_lecture(lecturer2, 'Python', 9)
student2.rate_lecture(lecturer2, 'C++', 8)
student2.rate_lecture(lecturer1, 'Python', 7)  # OK ‚Äî –æ–±–∞ –Ω–∞ Python

# –ü–æ–ø—ã—Ç–∫–∞ –æ—à–∏–±–æ—á–Ω–æ–≥–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è
print("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ü–µ–Ω–∏—Ç—å –Ω–µ –ª–µ–∫—Ç–æ—Ä–∞:")
print(student1.rate_lecture(reviewer1, 'Python', 5))  # => –û—à–∏–±–∫–∞

print("\n" + "="*50 + "\n")

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ __str__
print("Reviewer 1:")
print(reviewer1)
print("\nReviewer 2:")
print(reviewer2)

print("\nLecturer 1:")
print(lecturer1)
print("\nLecturer 2:")
print(lecturer2)

print("\nStudent 1:")
print(student1)
print("\nStudent 2:")
print(student2)

print("\n" + "="*50 + "\n")

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ª–µ–∫—Ç–æ—Ä–æ–≤
print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
print(f"student1 > student2: {student1 > student2}")
print(f"student1 == student2: {student1 == student2}")

print("\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–µ–∫—Ç–æ—Ä–æ–≤:")
print(f"lecturer1 > lecturer2: {lecturer1 > lecturer2}")
print(f"lecturer1 == lecturer2: {lecturer1 == lecturer2}")

print("\n" + "="*50 + "\n")

# –ü–æ–¥—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø–æ –∫—É—Ä—Å–∞–º
students_list = [student1, student2]
lecturers_list = [lecturer1, lecturer2]

print(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É 'Python': {average_grade_students(students_list, 'Python'):.1f}")
print(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É 'Git': {average_grade_students(students_list, 'Git'):.1f}")
print(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ª–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ –∫—É—Ä—Å—É 'Python': {average_grade_lecturers(lecturers_list, 'Python'):.1f}")
print(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ª–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ –∫—É—Ä—Å—É 'C++': {average_grade_lecturers(lecturers_list, 'C++'):.1f}")